{"ast":null,"code":"import { takeLatest, put, call, all } from 'redux-saga/effects';\nimport { createProfile, auth, provider, getCurrentUser } from '../../FireBase/firebase.utils';\nimport { signInFail, signInSuccess } from './user.actions';\nimport { UserActionTypes } from './user.types';\nexport function* checkAuth(user) {\n  try {\n    const userRef = yield call(createProfile, user);\n    const usersnap = yield userRef.get();\n    yield put(signInSuccess({\n      id: usersnap.id,\n      ...usersnap.data()\n    }));\n  } catch (err) {\n    yield put(signInFail(err));\n  }\n}\nexport function* signInGoogle() {\n  try {\n    const {\n      user\n    } = yield auth.signInWithPopup(provider);\n    yield checkAuth(user);\n  } catch (err) {\n    yield put(signInFail(err));\n  }\n}\nexport function* signInGoogleStart() {\n  yield takeLatest(UserActionTypes.GOOGLE_SIGN_IN_START, signInGoogle);\n}\nexport function* signInEmail({\n  payload: {\n    email,\n    password\n  }\n}) {\n  try {\n    const {\n      user\n    } = yield auth.signInWithEmailAndPassword(email, password);\n    yield checkAuth(user);\n  } catch (err) {\n    yield put(signInFail(err));\n  }\n}\nexport function* signInEmailStart() {\n  yield takeLatest(UserActionTypes.EMAIL_SIGN_IN_START, signInEmail);\n}\nexport function* isUserAuth() {\n  try {\n    const userAuth = yield getCurrentUser();\n    if (!userAuth) return;\n    yield checkAuth(userAuth);\n  } catch (err) {\n    yield put(signInFail(err));\n  }\n}\nexport function* onCheckUserSession() {\n  yield takeLatest(UserActionTypes.CHECK_USER_SESSION, isUserAuth);\n}\nexport function* userSagas() {\n  yield all([call(signInGoogleStart), call(signInEmailStart)]);\n}","map":{"version":3,"sources":["C:/Users/Manas/Desktop/Btech/web pr/shopnrock/src/Redux/UserReducer/user.saga.js"],"names":["takeLatest","put","call","all","createProfile","auth","provider","getCurrentUser","signInFail","signInSuccess","UserActionTypes","checkAuth","user","userRef","usersnap","get","id","data","err","signInGoogle","signInWithPopup","signInGoogleStart","GOOGLE_SIGN_IN_START","signInEmail","payload","email","password","signInWithEmailAndPassword","signInEmailStart","EMAIL_SIGN_IN_START","isUserAuth","userAuth","onCheckUserSession","CHECK_USER_SESSION","userSagas"],"mappings":"AAAA,SAAQA,UAAR,EAAmBC,GAAnB,EAAwBC,IAAxB,EAA6BC,GAA7B,QAAuC,oBAAvC;AACA,SAAQC,aAAR,EAAsBC,IAAtB,EAA2BC,QAA3B,EAAoCC,cAApC,QAAyD,+BAAzD;AACA,SAAQC,UAAR,EAAmBC,aAAnB,QAAuC,gBAAvC;AACA,SAAQC,eAAR,QAA8B,cAA9B;AACA,OAAO,UAAUC,SAAV,CAAqBC,IAArB,EAA2B;AAC9B,MAAG;AACC,UAAMC,OAAO,GAAE,MAAMX,IAAI,CAACE,aAAD,EAAeQ,IAAf,CAAzB;AACA,UAAME,QAAQ,GAAG,MAAMD,OAAO,CAACE,GAAR,EAAvB;AACA,UAAMd,GAAG,CAACQ,aAAa,CAAC;AAACO,MAAAA,EAAE,EAACF,QAAQ,CAACE,EAAb;AAAgB,SAAGF,QAAQ,CAACG,IAAT;AAAnB,KAAD,CAAd,CAAT;AACH,GAJD,CAKA,OAAMC,GAAN,EAAU;AACN,UAAMjB,GAAG,CAACO,UAAU,CAACU,GAAD,CAAX,CAAT;AACH;AACJ;AAED,OAAO,UAAUC,YAAV,GAAwB;AAC3B,MAAG;AACC,UAAM;AAACP,MAAAA;AAAD,QAAO,MAAMP,IAAI,CAACe,eAAL,CAAqBd,QAArB,CAAnB;AACA,UAAMK,SAAS,CAACC,IAAD,CAAf;AACH,GAHD,CAIA,OAAMM,GAAN,EAAU;AACN,UAAMjB,GAAG,CAACO,UAAU,CAACU,GAAD,CAAX,CAAT;AACH;AACJ;AAED,OAAO,UAAUG,iBAAV,GAA+B;AAClC,QAAMrB,UAAU,CAACU,eAAe,CAACY,oBAAjB,EAAsCH,YAAtC,CAAhB;AACH;AAED,OAAO,UAAUI,WAAV,CAAsB;AAACC,EAAAA,OAAO,EAAC;AAACC,IAAAA,KAAD;AAAOC,IAAAA;AAAP;AAAT,CAAtB,EAAkD;AACrD,MAAG;AACC,UAAM;AAACd,MAAAA;AAAD,QAAO,MAAMP,IAAI,CAACsB,0BAAL,CAAgCF,KAAhC,EAAsCC,QAAtC,CAAnB;AACA,UAAMf,SAAS,CAACC,IAAD,CAAf;AACH,GAHD,CAIA,OAAMM,GAAN,EAAU;AACN,UAAMjB,GAAG,CAACO,UAAU,CAACU,GAAD,CAAX,CAAT;AACH;AACJ;AAED,OAAO,UAAUU,gBAAV,GAA6B;AAChC,QAAM5B,UAAU,CAACU,eAAe,CAACmB,mBAAjB,EAAqCN,WAArC,CAAhB;AACH;AAED,OAAO,UAAUO,UAAV,GAAwB;AAC3B,MAAG;AACC,UAAMC,QAAQ,GAAG,MAAMxB,cAAc,EAArC;AACA,QAAG,CAACwB,QAAJ,EAAc;AACd,UAAMpB,SAAS,CAACoB,QAAD,CAAf;AACH,GAJD,CAKA,OAAMb,GAAN,EAAU;AACN,UAAMjB,GAAG,CAACO,UAAU,CAACU,GAAD,CAAX,CAAT;AACH;AACJ;AAED,OAAO,UAAUc,kBAAV,GAAgC;AACnC,QAAMhC,UAAU,CAACU,eAAe,CAACuB,kBAAjB,EAAoCH,UAApC,CAAhB;AACH;AAED,OAAO,UAAUI,SAAV,GAAuB;AAC1B,QAAM/B,GAAG,CAAC,CAACD,IAAI,CAACmB,iBAAD,CAAL,EAAyBnB,IAAI,CAAC0B,gBAAD,CAA7B,CAAD,CAAT;AACH","sourcesContent":["import {takeLatest,put, call,all} from 'redux-saga/effects';\r\nimport {createProfile,auth,provider,getCurrentUser} from '../../FireBase/firebase.utils';\r\nimport {signInFail,signInSuccess} from './user.actions';\r\nimport {UserActionTypes} from './user.types';\r\nexport function* checkAuth (user) {\r\n    try{\r\n        const userRef= yield call(createProfile,user);\r\n        const usersnap = yield userRef.get();\r\n        yield put(signInSuccess({id:usersnap.id,...usersnap.data()}));\r\n    }\r\n    catch(err){\r\n        yield put(signInFail(err));\r\n    }\r\n}\r\n\r\nexport function* signInGoogle(){\r\n    try{\r\n        const {user}=yield auth.signInWithPopup(provider);\r\n        yield checkAuth(user);\r\n    }\r\n    catch(err){\r\n        yield put(signInFail(err));\r\n    }\r\n}\r\n\r\nexport function* signInGoogleStart () {\r\n    yield takeLatest(UserActionTypes.GOOGLE_SIGN_IN_START,signInGoogle);\r\n}\r\n\r\nexport function* signInEmail({payload:{email,password}}) {\r\n    try{\r\n        const {user}=yield auth.signInWithEmailAndPassword(email,password);\r\n        yield checkAuth(user);\r\n    }\r\n    catch(err){\r\n        yield put(signInFail(err));\r\n    }\r\n}\r\n\r\nexport function* signInEmailStart (){\r\n    yield takeLatest(UserActionTypes.EMAIL_SIGN_IN_START,signInEmail);\r\n}\r\n\r\nexport function* isUserAuth () {\r\n    try{\r\n        const userAuth = yield getCurrentUser();\r\n        if(!userAuth) return;\r\n        yield checkAuth(userAuth);\r\n    }\r\n    catch(err){\r\n        yield put(signInFail(err));\r\n    }\r\n}\r\n\r\nexport function* onCheckUserSession () {\r\n    yield takeLatest(UserActionTypes.CHECK_USER_SESSION,isUserAuth);\r\n}\r\n\r\nexport function* userSagas () {\r\n    yield all([call(signInGoogleStart),call(signInEmailStart)]);\r\n}"]},"metadata":{},"sourceType":"module"}