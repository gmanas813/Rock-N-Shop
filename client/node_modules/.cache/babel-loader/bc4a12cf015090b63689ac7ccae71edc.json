{"ast":null,"code":"import { takeLatest, all, call, put, select, take } from 'redux-saga/effects';\nimport { UserActionTypes } from '../UserReducer/user.types';\nimport { clearCart, cartFromDb } from './cart.actions';\nimport { getUserCartRef } from '../../FireBase/firebase.utils';\nimport { selectCurrentUser } from '../UserReducer/user.selector';\nimport { selectCartItems } from './cart.selectors';\nimport { cartActionTypes } from './cart.types';\nexport function* clearOnSignout() {\n  yield put(clearCart());\n}\nexport function* updateCartOnDb() {\n  const curUser = yield select(selectCurrentUser);\n\n  if (curUser != null) {\n    try {\n      const cartRef = yield getUserCartRef(curUser.id);\n      const cartItems = yield select(selectCartItems);\n      yield cartRef.update({\n        cartItems\n      });\n    } catch (err) {\n      console.log(err);\n    }\n  }\n}\nexport function* checkCartFromDb({\n  payload: user\n}) {\n  const cartRef = yield getUserCartRef(user.id);\n  const snapCart = yield cartRef.get();\n  yield put(cartFromDb(snapCart.data(), cartItems));\n}\nexport function* onSignOutSuccess() {\n  console.log('Called');\n  yield takeLatest(UserActionTypes.SIGN_OUT_SUCCESS, clearOnSignout);\n}\nexport function* onUserSignIn() {\n  yield takeLatest(UserActionTypes.SIGN_IN_SUCCESS, checkCartFromDb);\n}\nexport function* cartChange() {\n  yield takeLatest([cartActionTypes.ADD_ITEM, cartActionTypes.REMOVE_ITEM, cartActionTypes.CLEAR_ITEM_FROM_CART, cartActionTypes.CLEAR_CART], updateCartOnDb);\n}\nexport function* cartSagas() {\n  yield all([call(onSignOutSuccess), call(cartChange), call(onUserSignIn)]);\n}","map":{"version":3,"sources":["C:/Users/Manas/Desktop/Btech/web pr/shopnrock/client/src/Redux/Cart/cart.saga.js"],"names":["takeLatest","all","call","put","select","take","UserActionTypes","clearCart","cartFromDb","getUserCartRef","selectCurrentUser","selectCartItems","cartActionTypes","clearOnSignout","updateCartOnDb","curUser","cartRef","id","cartItems","update","err","console","log","checkCartFromDb","payload","user","snapCart","get","data","onSignOutSuccess","SIGN_OUT_SUCCESS","onUserSignIn","SIGN_IN_SUCCESS","cartChange","ADD_ITEM","REMOVE_ITEM","CLEAR_ITEM_FROM_CART","CLEAR_CART","cartSagas"],"mappings":"AAAA,SAAQA,UAAR,EAAmBC,GAAnB,EAAuBC,IAAvB,EAA4BC,GAA5B,EAAgCC,MAAhC,EAAwCC,IAAxC,QAAmD,oBAAnD;AAEA,SAAQC,eAAR,QAA8B,2BAA9B;AACA,SAAQC,SAAR,EAAkBC,UAAlB,QAAmC,gBAAnC;AACA,SAAQC,cAAR,QAA6B,+BAA7B;AACA,SAAQC,iBAAR,QAAgC,8BAAhC;AACA,SAAQC,eAAR,QAA8B,kBAA9B;AACA,SAASC,eAAT,QAAgC,cAAhC;AACA,OAAO,UAAUC,cAAV,GAA2B;AAC9B,QAAMV,GAAG,CAACI,SAAS,EAAV,CAAT;AACH;AAED,OAAO,UAAUO,cAAV,GAA2B;AAC9B,QAAMC,OAAO,GAAE,MAAMX,MAAM,CAACM,iBAAD,CAA3B;;AACA,MAAGK,OAAO,IAAE,IAAZ,EAAiB;AACb,QAAG;AACC,YAAMC,OAAO,GAAE,MAAMP,cAAc,CAACM,OAAO,CAACE,EAAT,CAAnC;AACA,YAAMC,SAAS,GAAG,MAAMd,MAAM,CAACO,eAAD,CAA9B;AACA,YAAMK,OAAO,CAACG,MAAR,CAAe;AAACD,QAAAA;AAAD,OAAf,CAAN;AACH,KAJD,CAKA,OAAME,GAAN,EAAU;AACNC,MAAAA,OAAO,CAACC,GAAR,CAAYF,GAAZ;AACH;AACJ;AACJ;AAED,OAAO,UAAUG,eAAV,CAA0B;AAACC,EAAAA,OAAO,EAACC;AAAT,CAA1B,EAA0C;AAC7C,QAAMT,OAAO,GAAG,MAAMP,cAAc,CAACgB,IAAI,CAACR,EAAN,CAApC;AACA,QAAMS,QAAQ,GAAG,MAAMV,OAAO,CAACW,GAAR,EAAvB;AACA,QAAMxB,GAAG,CAACK,UAAU,CAACkB,QAAQ,CAACE,IAAT,EAAD,EAAiBV,SAAjB,CAAX,CAAT;AACH;AAED,OAAO,UAAUW,gBAAV,GAA8B;AACjCR,EAAAA,OAAO,CAACC,GAAR,CAAY,QAAZ;AACA,QAAMtB,UAAU,CAACM,eAAe,CAACwB,gBAAjB,EAAkCjB,cAAlC,CAAhB;AACH;AAED,OAAO,UAAUkB,YAAV,GAA0B;AAC7B,QAAM/B,UAAU,CAACM,eAAe,CAAC0B,eAAjB,EAAiCT,eAAjC,CAAhB;AACH;AAED,OAAO,UAAUU,UAAV,GAAwB;AAC3B,QAAMjC,UAAU,CAAC,CAACY,eAAe,CAACsB,QAAjB,EAA0BtB,eAAe,CAACuB,WAA1C,EAAsDvB,eAAe,CAACwB,oBAAtE,EAA2FxB,eAAe,CAACyB,UAA3G,CAAD,EAAwHvB,cAAxH,CAAhB;AACH;AAED,OAAO,UAAUwB,SAAV,GAAuB;AAC1B,QAAMrC,GAAG,CAAC,CAACC,IAAI,CAAC2B,gBAAD,CAAL,EAAwB3B,IAAI,CAAC+B,UAAD,CAA5B,EAAyC/B,IAAI,CAAC6B,YAAD,CAA7C,CAAD,CAAT;AACH","sourcesContent":["import {takeLatest,all,call,put,select, take} from 'redux-saga/effects';\r\n\r\nimport {UserActionTypes} from '../UserReducer/user.types';\r\nimport {clearCart,cartFromDb} from './cart.actions';\r\nimport {getUserCartRef} from '../../FireBase/firebase.utils';\r\nimport {selectCurrentUser} from '../UserReducer/user.selector';\r\nimport {selectCartItems} from './cart.selectors';\r\nimport { cartActionTypes } from './cart.types';\r\nexport function* clearOnSignout() {\r\n    yield put(clearCart());\r\n}\r\n\r\nexport function* updateCartOnDb() {\r\n    const curUser =yield select(selectCurrentUser);\r\n    if(curUser!=null){\r\n        try{\r\n            const cartRef =yield getUserCartRef(curUser.id);\r\n            const cartItems = yield select(selectCartItems);\r\n            yield cartRef.update({cartItems});\r\n        }\r\n        catch(err){\r\n            console.log(err);\r\n        }\r\n    }\r\n}\r\n\r\nexport function* checkCartFromDb({payload:user}) {\r\n    const cartRef = yield getUserCartRef(user.id);\r\n    const snapCart = yield cartRef.get();\r\n    yield put(cartFromDb(snapCart.data(),cartItems));\r\n}\r\n\r\nexport function* onSignOutSuccess () {\r\n    console.log('Called');\r\n    yield takeLatest(UserActionTypes.SIGN_OUT_SUCCESS,clearOnSignout);\r\n}\r\n\r\nexport function* onUserSignIn () {\r\n    yield takeLatest(UserActionTypes.SIGN_IN_SUCCESS,checkCartFromDb);\r\n}\r\n\r\nexport function* cartChange () {\r\n    yield takeLatest([cartActionTypes.ADD_ITEM,cartActionTypes.REMOVE_ITEM,cartActionTypes.CLEAR_ITEM_FROM_CART,cartActionTypes.CLEAR_CART],updateCartOnDb);\r\n}\r\n\r\nexport function* cartSagas () {\r\n    yield all([call(onSignOutSuccess),call(cartChange),call(onUserSignIn)]);\r\n}\r\n\r\n\r\n"]},"metadata":{},"sourceType":"module"}